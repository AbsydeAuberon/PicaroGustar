<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

randomize();

buttonTime=false;
global.timeActive = false;
timeStopAvailable=0;

//for moving
vel=4;
accel=1;
maxVel=6;

//is the character alive?
global.alive=true;

//power ups
leftPowerUp=0;
rightPowerUp=0;
reroll=5;
rerollCount=0;
rerollCountLimit=5;
global.newRoom=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time stop sprite is over
sprite_index=sprPlayer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///time stop control
buttonTime=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Handle inputs to calculate the target speed
targetVelX=0;
targetVelY=0;
//Player can only do things if he's alive
if (global.alive==true)
{
if(keyboard_check(vk_left)||keyboard_check(ord('A')))
{
    targetVelX=-maxVel;
}
if(keyboard_check(vk_right)||keyboard_check(ord('D')))
{
    targetVelX=maxVel;
}
    
if(keyboard_check(vk_up)||keyboard_check(ord('W')))
{
    targetVelY=-maxVel;
}
if(keyboard_check(vk_down)||keyboard_check(ord('S')))
{
    targetVelY=maxVel;
}
    
diffVelX=clamp(targetVelX-hspeed,-accel,accel);
hspeed+=diffVelX;
diffVelY=clamp(targetVelY-vspeed,-accel,accel);
vspeed+=diffVelY;   


//we can change the sprite only if there's no other action with the sprite as time stop
if (sprite_index!=sprPlayerTimeStop)
{
    //Now we change the sprite index in order to be idle
    if (vspeed &lt; 0&amp;&amp;hspeed==0)
    {
        if (sprite_index != sprPlayerWalk)
        {
            sprite_index = sprPlayerWalk;
            image_xscale=1;
        }
    }
    else if (vspeed&gt;0&amp;&amp;hspeed==0)
    {
        if (sprite_index != sprPlayerWalk)
        {
            sprite_index=sprPlayerWalk;
            image_xscale=1;
        }
    }
    else if (hspeed&gt;0)
    {
        sprite_index=sprPlayerWalk;
        image_xscale=-1;
    }
    else if (hspeed&lt;0)
    {
        sprite_index=sprPlayerWalk;
        image_xscale=1;
    }
    
    //And if the character is not walking
    else
    {
        sprite_index = sprPlayer;
    }
}
}

//collisions for not going into the walls

//collisions in the vertical axis
if(place_meeting(x, y+vspeed, objInvWall)){
    while(!place_meeting(x, y+sign(vspeed), objInvWall)){
        y+=sign(vspeed);
    }
    vspeed=0;
}

//collisions in the horizontal axis
if(place_meeting(x+hspeed, y, objInvWall)){
    while(!place_meeting(x+sign(hspeed), y, objInvWall)){
        x+=sign(hspeed);
    }
    hspeed=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actions

if mouse_check_button_released(mb_left)
{
    switch (leftPowerUp)
    {
    case 0: //starting with no power up
       break;
    case 1: //punch
    
       break;
    case 2: //sword
    
       break;
    case 3: //fireball
    
       break;
   case 4: //iceball
    
       break;
    }
}

if mouse_check_button_released(mb_right)
{
    switch (rightPowerUp)
    {
    case 0: //starting with no power up
    case 1: //time stop
    
       break;
    case 2: //invulnerability
    
       break;
    case 3: //2nd chance to live
    
       break;
   case 4: //shield
    
       break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///power up and reroll
//when entering a new room you get a new power up and a new secondary power up
if (global.newRoom==1)
{
    rerollCount+=1;
    if (rerollCount&gt;=rerollCountLimit)
    {
        if (reroll&lt;2)
        {
            reroll+=1;
        }
        rerollCount=0;
    }
    leftPowerUp=irandom_range(1,3);
    rightPowerUp=irandom_range(1,3);
    
    global.newRoom=0;
}

//sprite index must change in objLeftPowerUp and objRightpowerUp
switch (leftPowerUp)
    {
    case 0: //starting with no power up
       with (objLeftPowerUp)
        {
            sprite_index=sprNoPowerUp;
        }
       break;
    case 1: //punch
        with (objLeftPowerUp)
        {
            sprite_index=sprPunch;
        }
       break;
    case 2: //sword
        with (objLeftPowerUp)
        {
            sprite_index=sprSword;
        }
       break;
    case 3: //fireball
        with (objLeftPowerUp)
        {
            sprite_index=sprPunch;
        }
       break;
   case 4: //iceball
       with (objLeftPowerUp)
       {
            sprite_index=sprPunch;
       }
       break;
    }

switch (rightPowerUp)
    {
    case 0: //starting with no power up
        timeStopAvailable=0;
        with (objRightPowerUp)
        {
            sprite_index=sprNoPowerUp;
        }
        break;
    case 1: //time stop
        timeStopAvailable=1;
        with (objRightPowerUp)
        {
            sprite_index=sprTimeStop;
        }
       break;
    case 2: //invulnerability
        timeStopAvailable=0;
        with (objRightPowerUp)
        {
            sprite_index=sprInvulnerable;
        }
       break;
    case 3: //2nd chance to live
        timeStopAvailable=1;
        with (objRightPowerUp)
        {
            sprite_index=sprTimeStop;
        }
       break;
   case 4: //shield
        timeStopAvailable=1;
        with (objRightPowerUp)
        {
            sprite_index=sprTimeStop;
        }
       break;
    }
    
    
//Reroll power allows you to repeat you chance to get a power
if(keyboard_check_released(ord('R')) &amp;&amp; reroll&gt;0)
{
    leftPowerUp=irandom_range(1,3);
    rightPowerUp=irandom_range(1,3);
    reroll-=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///number of rerolls available

//First of all, we draw ourselves
draw_self(); 

//now we we draw the reroll number
draw_set_colour(c_red);

draw_set_font(fontReroll);

str1 = reroll;
    draw_text(290, 10, str1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time stop
if (mouse_check_button(mb_right) &amp;&amp; timeStopAvailable==1)
{
    alarm[1]=5;
    sprite_index=sprPlayerTimeStop;
    buttonTime=true;
    timeStopAvailable=0;
    alarm[0]=150;
    audio_play_sound(sndTimeStop,1,false);
    rightPowerUp=0;
}
if(buttonTime)
{
    global.timeActive = !global.timeActive;
    /*instance_create(x,y,objEnableShader);
    timeStopAvailable=0;*/
}

    if (global.timeActive)
    {
        shader_set(shader0);
    }
    else
    {
        shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
